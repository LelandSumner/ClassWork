\documentclass[12pt]{article}

\pagestyle{plain}
\oddsidemargin 0in       %   Left margin on odd-numbered pages.
\evensidemargin 0in        %   Left margin on even-numbered pages.
\textwidth 6.5in
\textheight 9in
\topmargin 0in
\headheight 0in
\headsep 0in

\usepackage[T1]{fontenc}
\usepackage{pslatex}
%\renewcommand*{\familydefault}{\sfdefault}

\usepackage{verbatim}
\newenvironment{qv}%
  {\quote
   \verbatim}%
  {\endverbatim
   \endquote}

\newcommand{\exx}{\\[2ex]}
\newcommand{\code}{\texttt}
\newcommand{\fname}{\texttt}

\parskip 2ex
\parindent 0em


\begin{document}
\sloppypar

\begin{center}
\Large\bf
CIS 201 -- Computer Science I\\
Laboratory Assignment 5\\
\end{center}

\section*{Introduction}
In this lab you will create a game that will incorporate 
\begin{itemize}
\item Count controlled iteration (\code{for} statement)
\item Non-text score keeping
\end{itemize}
The purpose of this game is to use the arrow keys
to move a ``rake'' around the active part of the game canvas to pick up leaves
and to deposit them in a separate leaf pile.

\section*{Raking Leaves}
Create a \fname{Lab05} in which you will do your work,
and change to that directory.
Begin editing a game with the class name \code{RakingLeaves}
as outlined below.
Remember that this game will extend the FANG \code{Game} class
and that you will need to use an \code{import} statement
for this to work.
Include a header comment, a class declaration, and our standard two methods.
Here is your starting point.

\begin{qv}
import fang.core.Game;

/**
 * Describe class RakingLeaves here.
 *
 *
 * Created: Tue Sep  2 09:37:57 2008
 *
 * @author <a href="mailto:student1@potsdam.edu">Indiana Jones</a>
 * @author <a href="mailto:student2@potsdam.edu">Luke Skywalker</a>
 * @version 1.0
 */
public class RakingLeaves extends Game {

  /**
   * Deposit the leaves into the raking area and set up the rake
   */
  public void setup() {
    
  }
  
  /**
   * Move the rake to pick up the leaves, and deposite them
   * into the leaf pile.
   * 
   * @param dT time (in fractional seconds) since the last call to advance
   */
  public void advance(double dT) {
    
  }
} // class RakingLeaves
\end{qv}

\textbf{Change the size of the game.}
We want to give up some of the screen to a ``scoring box'' so you will
want to make the game field larger than it normally is. Remember that
though we change the size (and shape) of the screen, location
coordinates are still given in \emph{screens} so the upper-left corner
is still at \code{(0.0, 0.0)} and the lower-right corner is still at
\code{(1.0, 1.0)}. 

Game size is set during construction of the game. You must add a
\emph{constructor} to your game. A constructor is a special method
that is called when an object of the given type is created (when
\code{new} is called).  Your game extends the FANG \code{Game} class,
and the FANG game engine automatically constructs an instance of your
game to get things going.  If you don't provide your own constructor,
the FANG library gives you one free of charge -- the one you have
already seen on your earlier games.

The signature of a constructor has no return
type and has the same name as the class itself (two ways to recognize
that a method is a constructor if you were ever asked on a test or
quiz, for example). So, a \code{public} constructor for our
\code{RakingLeaves} class with an
empty parameter list would look like this:

\begin{qv}
public RakingLeaves () {
...
}
\end{qv}

In a constructor, the very first line can call the superclass constructor
(in this case, the constructor for the FANG \code{Game} class),
possibly providing it with different parameters.
The way you specify
the ``other'' constructor is with the keyword \code{super}.
This must be the first non-comment line of the
constructor.
In our case, it will be the only line: we will call
the \code{Game} constructor that takes a width and height for the game
field \emph{in pixels}. Your game should be 640 by 640 pixels (width
by height), so you should put this constructor in your code,
just after your \code{class} declaration:

\begin{qv}
public RakingLeaves() {
  super(640, 640);
}
\end{qv}

This constructor requires a header comment just like we have
for our methods.  Add an appropriate comment to your code.

\subsection*{Checkpoint 1}
{\bf
Compile and run your program.
Show us your code and that your game canvas
appears to be larger on the screen than before.
}

\section*{Setting up the game}

\subsection*{Leaf Pile}

Create a ``leaf pile'': a green rectangle filling approximately the
left 1/3 of the screen. This is where you will pile your leaves.
Declare a double field variable named \code{split}
that will be the $x$-coordinate at which you will split your screen.
A value of 0.33 will be fine, but you can change this later
if you wish.

To create the leaf pile, define a \code{RectangleSprite} variable
in your \code{setup} method,
giving the rectangle the appropriate dimensions
(width \code{split} and height 1.0) and color (green)
and adding it to your game canvas.
You should {\em not} declare the variable as a field variable
since you will never need to refer to it outside of the \code{setup} method.

\subsection*{Making leaves}

Define a \code{makeLeaf} method.
This method will create a new leaf
and return it to the caller.
Putting this task in its own method
will make it easy to reuse it when we need to update the score and add new
leaves to the game.

The method should return a \code{PolygonSprite} because our leaves
will be regular polygons with 3-6 sides. The method should declare a
local variable to hold the leaf (since you will need to set color,
scale, etc. before returning it).

The following code should start you out
This code defines a variable \code{leaf} to hold a \code{PolygonSprite}
and returns the \code{leaf} to the caller.
Put this code {\em after} the \code{setup} and \code{advance} methods.

\begin{qv}
public PolygonSprite makeLeaf() {
  PolygonSprite leaf = new PolygonSprite(...); // fill in...
  // <fill in according to discussion below>
  leaf.setLocation(/* see below */);
  return leaf;
}
\end{qv}

If you were to try to compile this code, it would give you errors,
particularly because of the three dots! 
You need to replace it
with an expression that returns a random integer value between 3 and 6
(inclusive).
You should use the \code{randomInt} method, part of the \code{Game} class,
to get such an integer.  Read the documentation to find out
what parameters this method requires.

After you have created the leaf,
you will need to set its color randomly.
You can use the \code{getColor} method
to set the color appropriately, using random values for red, green, and blue.
But don't make the colors too dark,
otherwise you won't be able to see them on the canvas.
Thus you should use random values between 128 and 255
for each of the red, green, and blue values.
Set the scale of the leaf to 0.05
using the \code{setScale} method.

We want to randomly position the leaf to the right of the leaf pile.
Use the \code{randomDouble} method (see the documentation)
to position the leaf to the right of the leaf pile.
Remember that the \code{split} variable gives the $x$-coordinate
where the leaf pile ends and the rest of the game canvas (the yard) starts.
Use this code:
\begin{qv}
  leaf.setLocation(randomDouble(0.33, 1.0),randomDouble());
\end{qv}

Finally, add the leaf to the game canvas.

Do all of this {\em before} you return the \code{leaf} to the caller.

\subsection{Add leaves to the yard}
In your \code{setup} method,
You will add 10 leaves to the yard (to the right of the leaf pile).
You will need to keep track of each leaf,
but you don't want to have a separate variable for each.
To do this, you declare a field variable \code{leaves}
which will be an \code{ArrayList} of \code{PolygonSprite}s.
Here is the declaration:

\begin{qv}
private ArrayList<PolygonSprite> leaves.
\end{qv}

Near the beginning in your \code{setup} method,
define your \code{leaves} variable as follows:

\begin{qv}
leaves = new ArrayList<PolygonSprite>();
\end{qv}

The \code{<PolygonSprite>} part tells Java that the array list
can only hold \code{PolygonSprite}s, and nothing else.

After you have defined the \code{leaves} variable in the \code{setup} method,
you can create 10 leaves, keep track of them
in the \code{leaves} array,
and add them to the game canvas.
Here is the code:

\begin{qv}
  for (int i = 0; i < 10; i++) {
    PolygonSprite nextLeaf = makeLeaf(); // why we made a method
    leaves.add(nextLeaf);
  }
\end{qv}

\subsection*{Checkpoint 2}
{\bf
Show us your work at this point.
When you run your program, you should see a bunch
of leaves randomly placed in the ``yard''.
}

\section*{Raking leaves}

\subsection*{Make a rake}
A rake is a yellow triangle with a
scale of 0.10. Initially position it in the middle of the screen.
The \code{rake} variable will be a \code{PolygonSprite} with three sides.
Declare it as a field variable 
and initialize it in the \code{setup} method.
Be sure to add it to your game canvas!

\subsection*{Moving the rake}
In the \code{advance} method,
use the arrow keys to move the rake.
The rake should move at the rate of about 2 screens/second.
Create a field variable defining the rake speed
and use it in the \code{advance} method.
Be sure that the rake doesn't leave the yard.
This means that you need to should {\em not} move the rake
horizontally unless its $x$ coordinate is between \code{split} and 1.0,
and vertically unless its $y$ coordinate is between 0.0 and 1.0.

\subsection*{Checkpoint 3}
{\bf
Show us how your rake moves.
}

\section*{Piling up leaves}

When the rake ``rakes over'' a leaf, that
leaf should be put into the scoring box (position to be described
below) and a new leaf is to be added randomly to the yard.

To check if a the rake hits a leaf, you should use
the \code{intersects} method.
Since all of the leaves in the yard are stored
in the \code{leaves} array,
all you need to do is to march through the array
and check for intersections.
Here is the code to do so:
\begin{qv}
for (int i=0 ; i<leaves.size() ; i++) {
  PolygonSprite leaf = leaves.get(i);
  if (rake.intersects(leaf)) {
    // move the leaf to a random place in the bottom half
    // of the leaf pile
    leaves.set(i, newLeaf());
  }  
}
\end{qv}

\subsection*{Checkpoint 4}
{\bf
Show us your work.
}

\end{document}
