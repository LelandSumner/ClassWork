% book.tex -- Copyright (c) 2004, Brian C. Ladd
%
%  Author : Brian C. Ladd 
%  Created: Wed Jul 07 12:03:49 2004 by blad
%  Revised: Fri Dec 28 15:27:43 2007 by blad
%  
\def\FileCreated{Wed Jul 07 12:03:49 2004}
\def\FileRevised{Fri Dec 28 15:27:43 2007}
\documentclass[12pt,twoside]{memoir}
\usepackage{epsfig}
\usepackage{graphicx}
\usepackage[usenames]{color}
\usepackage{xltxtra}
\usepackage{fontspec}
\usepackage{textcomp}
\usepackage{pstricks}
\usepackage{listings}[2000/08/23] 

\usepackage{rotating}
\usepackage{exercise}
% ----- Fonts -----
\defaultfontfeatures{Scale=MatchLowercase,Mapping=tex-text}
\setmainfont{Gentium Book Basic}
\setmonofont{Bitstream Vera Sans Mono}
\setsansfont{Arial}
% ----- Fonts -----

\definecolor{nicered}{rgb}{.647,.129,.149}
\definecolor{listinggray}{gray}{0.1}
\definecolor{templategrey}{gray}{0.85}
\definecolor{NewtonsApple}{gray}{.95}
\definecolor{commandlinebackground}{gray}{.90}
\definecolor{commandlineforeground}{gray}{0.20,}
\definecolor{commandpromptforeground}{gray}{0.55}

\newcommand\code[1]{\lstinline^#1^}
\newcommand\fname[1]{\texttt{#1}}
\newcommand\note[1]{\unskip\footnote{#1}}
\newcommand\foreign[1]{\emph{#1}}
\newcommand\ensurecomma{%
  \@ifnextchar,{}{\@latex@error{Don’t forget the comma!}{}}}
\newcommand\eg{\foreign{e.g.}\ensurecomma}
\newcommand\ie{\foreign{i.e.}\ensurecomma}
\newcommand\cf{\foreign{cf.\@}}

\newcommand\ensuresingleperiod{\@ifnextchar.{}{.\@}}
\newcommand\etc{\foreign{etc}\ensuresingleperiod}
\newcommand\etal{\foreign{et al}\ensuresingleperiod}

\DeclareGraphicsExtensions{.eps,.pdf,.png,.gif,.jpg}

\newcounter{ProgrammingProblem}
\setcounter{ProgrammingProblem}{0}%

\newenvironment{LabExercises}{%
\renewcommand{\ExerciseListName}{Question}%
\renewcommand{\ExerciseListHeader}{\textbf{%
   Checkpoint\ExerciseHeaderNB. }}
\begin{ExerciseList}}%
{\end{ExerciseList}}
\newcommand{\LabExercise}{\Exercise[name={Lab Phase\ExerciseHeaderNB},counter={ProgrammingProblem}]}

\lstset{language=java,
  basicstyle=\small\ttfamily,
  numbers=left, 
  numberstyle=\tiny, 
  stepnumber=1, 
  numbersep=5pt,
  frame=single,
  captionpos=b,
  rulecolor=\color{nicered}
}

\lstdefinelanguage{cline}
{
  morecomment=[s][\color{commandpromptforeground}]{ }{ },
} 

\lstnewenvironment{commandline}[1][]
  {\lstset{language=cline,numbers=none,frame=none,backgroundcolor=\color{commandlinebackground},basicstyle=\color{commandlineforeground},nolol,#1}}
  {}

\setlength{\hoffset}{0in}
\setlength{\voffset}{0in}
\settypeblocksize{9.5in}{7.5in}{*}
\setlrmargins{0.5in}{*}{1}
\setulmargins{0.75in}{*}{*}
\setheadfoot{\onelineskip}{2\onelineskip}
\checkandfixthelayout

\begin{document}

\title{CIS 201 Fall 2008: Lab 5}
\maketitle

\begin{itemize}
\item Count controlled iteration (\code{for} statement)
\item Modifying screen size
\item Non-text score keeping
\item Writing JavaDoc formatted comments
\end{itemize}

\begin{figure}[htb]
  \begin{center}    
    \includegraphics[width=6in]{Drawings/raking-design}  
    \caption{Raking Leaves Design}
  \label{fig:login}
  \end{center}
\end{figure}



\begin{LabExercises}
\LabExercise Create a new game called \code{RakingLeaves}

As always: The partner who is logged in should create a \fname{Lab5}
directory in their \fname{CS1} directory. In that directory, create a
new game. The name of the game class is \code{RakingLeaves} so what
is the name of the file it should be in?

You want to create an empty game template in the new file. That is, a
header comment, a class declaration, and our standard two methods:

\begin{lstlisting}[numbers=none]
import fang.core.Game;

/**
 * Describe class RakingLeaves here.
 *
 *
 * Created: Tue Sep  2 09:37:57 2008
 *
 * @author <a href="mailto:student1@potsdam.edu">Indiana Jones</a>
 * @author <a href="mailto:student2@potsdam.edu">Luke Skywalker</a>
 * @version 1.0
 */
public class RakingLeaves extends Game {
  /**
   * Describe setup method here
   */
  public void setup() {
    
  }
  
  /**
   * Describe advance method here
   * 
   * @param dT time (in fractional seconds) since the last call to advance
   */
  public void advance(double dT) {
    
  }
} // class RakingLeaves
\end{lstlisting}

Your job: Fill in the comments. That is, describe the game you are
playing in the \code{class} header comment. The description can be
short and can reference this document if you like but it should
include some description.

The header comments for the methods must also be updated. The
descriptions should include your \emph{intention} for what the method
does. That is, in this case, \code{advance} does something like move
the rake, and move the leaves if necessary. You should mention the
class-level variables that participate in making that happen.

Notice that no where in that description did I use any Java; you want
to talk about what happens in a method at a higher level than that.

\textbf{Change the size of the game.}
We want to give up some of the screen to a ``scoring box'' so you will
want to make the game field larger than it normally is. Remember that
though we change the size (and shape) of the screen, location
coordinates are still given in \emph{screens} so the upper-left corner
is still at \code{(0.0, 0.0)} and the lower-right corner is still at
\code{(1.0, 1.0)}. 

Game size is set during construction of the game. You must add a
\emph{constructor} to your game. A constructor is a special method
that is called when an object of the given type is created (when
\code{new} is called). The signature of a constructor has no return
type and has the same name as the class itself (two ways to recognize
that a method is a constructor if you were ever asked on a test or
quiz, for example). So, if we want a \code{public} constructor with an
empty parameter list, what would the signature be?

In a constructor, the very first line can call another constructor,
possibly providing it with different parameters. The way you specify
the ``other'' constructor is with the keyword \code{super}. This
means, ``the constructor of the class that I \code{extend} that these
parameters match''. This must be the first non-comment line of the
constructor. For our purposes, it will be the only line: we will call
the \code{Game} constructor that takes a width and height for the game
field \emph{in pixels}. Your game should be 640 by 480 pixels (width
by height):

\begin{lstlisting}[numbers=none]
public RakingLeaves() {
  super(640, 480);
}
\end{lstlisting}

This is a \emph{method} so it requires a header comment. Also, 

Note that this is a method so you \emph{must} include a header comment
for it.

Before continuing, raise your hand and show the instructors your newly
resized game.

\LabExercise Create a ``score box'': a green rectangle filling the
whole left 1/3 of the screen. This is where you will pile your leaves.

\textbf{Create a \code{makeLeaf} method.}

This method will create a new leaf. By putting it in its own method it
will be easy to reuse it when we need to update the score and add new
leaves to the game. 

The method should return a \code{PolygonSprite} because our leaves
will be regular polygons with 3-6 sides. The method should declare a
local variable to hold the leaf (since you will need to set color,
scale, etc. before returning it). So, how do you declare a local
variable to hold a \code{PolygonSprite}? And how do you return that
value from the method? Here is the template:

\begin{lstlisting}[numbers=none]
public PolygonSprite makeLeaf() {
  PolygonSprite leaf = new PolygonSprite(...); // you need to fill in ...
  // <fill in according to discussion below>
  leaf.setLocation(/* see below */);
  return leaf;
}
\end{lstlisting}

Notice that the \code{...} does not compile. You need to replace it
with an expression that returns a random value between 3 and 6
(inclusive). How do you get a random integer value between two other
values?

So, in the middle, you need to set the leaf to a random color
(\code{Game.getRandomColor()} is your friend!) and set its scale to
0.05.

We want to randomly position the leaf but we do not want to put any
leaves over the score box. How to do that? How about specifying the
range for the x-coordinate in the \code{randomDouble} call?

\begin{lstlisting}[numbers=none]
  leaf.setLocation(randomDouble(0.33, 1.0),randomDouble());
\end{lstlisting}

Question to answer in Lab: What is the range of values returned by
\code{randomDouble()} (note the empty parameter list).


\textbf{Add leaves to your game.}
You will want to have 10 leaves in your game. Where will you add these
sprites to your game? How will you add 10 leaves without using 10
variables? Yep, \code{ArrayList}.

\begin{itemize}
\item Include the right type.
\item Declare a variable, \code{leaves}, which is an \code{ArrayList}
  of \code{PolygonSprite}. What is the notation for that?
\item Inside the correct method, initialize \code{leaves} (this means
  call \code{new}).
\end{itemize}

Now, using a \code{for} loop, create, add, and position 10 leaves.

\begin{lstlisting}[numbers=none]
  for (i = 0; i < 10; ++i) {
    PolygonSprite nextLeaf = makeLeaf(); // why we made a method
    leaves.add(nextLeaf);
    addSprite(nextLeaf);
  }
\end{lstlisting}


Compile and test your program; you should see the green score box and
a bunch of random leaves.

Show what you have to the instructors.

\LabExercise Lets make a rake. A rake is a yellow triangle with a
scale of 0.10. Initially position it in the middle of the screen.

 Use the arrow keys to move the rake. Rake's movement rate
should be about 2 screens/second.

 Stop the rake at the edges of the screen \emph{and} at
the edge of the scoring box.

 Add scoring. When the rake ``rakes over'' a leaf, that
leaf should be put into the scoring box (position to be described
below) and a new leaf is to be added to \code{leaves}. 

First: How would you check if the rake hit any one leaf? How will you
do that for \emph{all} members of \code{leaves}? If you say ``do
\emph{blah} for all members of an array list'', you should be thinking
``count-controlled loop'' (or \code{for} loop). Thus you need a
\code{for} loop in the method for checking for collision.

Second: Inside the loop you will need to see if the leaf and rake
hit. This means you must use \emph{selection} inside of
\emph{iteration}. Use the curly braces and indentation to keep your
program readable. 

Third: When a leaf is raked, reset its location to be in the scoring
box (random x-coordinate within that range) and in the bottom quarter
of the screen (random y-coordinate within that range). This represents
your pile. Note that you don't need to do anything with the leaves in
the pile after they are placed so you don't need to keep a reference
to any of them.

Finally: Replace the leaf you just put in the pile with a new
leaf. That is, the current element in \code{leaves} must be
changed. This is what the \code{set} method for \code{ArrayList} is
all about. You create a new leaf and add it to the game and set the
current entry in \code{leaves}. Again, aren't you glad we made a method.

Show your work to the instructors and answer the following questions
before submitting your work. Feel free to ask questions.

\LabExercise How many circles will each of the following add to the
screen; you may assume each runs with an initially blank screen.

\begin{enumerate}
\item 
\begin{lstlisting}
int i;
for (i = 0; i < 10; ++i) {
  OvalSprite localSprite = new OvalSprite(randomDouble(), randomDouble());
  addSprite(localSprite);
}
\end{lstlisting}

\item 
\begin{lstlisting}
int j;
for (j = 2; j < 11; ++j) {
  OvalSprite localSprite = new OvalSprite(randomDouble(), randomDouble());
  addSprite(localSprite);
}
\end{lstlisting}

\item 
\begin{lstlisting}
int k;
for (k = 10; k >= 0; --k) { // --k is k = k - 1
  OvalSprite localSprite = new OvalSprite(randomDouble(), randomDouble());
  addSprite(localSprite);
}
\end{lstlisting}

\item 
\begin{lstlisting}
int i;
for (i = 0; i < 10; ++i) {
  if ((i % 2) == 0) {
    OvalSprite localSprite = new OvalSprite(randomDouble(), randomDouble());
    addSprite(localSprite);
  }
}
\end{lstlisting}

\item 
\begin{lstlisting}
int i;
for (i = 0; i < 8; ++i) {
  int j;
  for (j = 0; j < 3; ++j) {
    OvalSprite localSprite = new OvalSprite(randomDouble(), randomDouble());
    addSprite(localSprite);
  }
}
\end{lstlisting}

\end{enumerate}

\LabExercise Upload \fname{RakingLeaves.java} 

Make sure both authors' names are in the header comment!

Go to Moodle; you will find an assignment in week 5 labeled
\textbf{Lab5}. Go there and upload \fname{RakingLeaves.java}. Note
that there will be other files in that directory. You want to make
sure you upload just the \fname{.java} file.

\end{LabExercises}


\end{document}

%%% Local Variables: 
%%% mode: latex
%%% End: 

% LocalWords:  Moodle Ladd's login emacs
